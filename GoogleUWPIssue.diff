diff --git a/Android/Android.csproj b/Android/Android.csproj
index 69ffa10..7dab965 100644
--- a/Android/Android.csproj
+++ b/Android/Android.csproj
@@ -15,7 +15,8 @@
     <FileAlignment>512</FileAlignment>
     <GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>
     <TargetFrameworkVersion>v8.1</TargetFrameworkVersion>
-    <NuGetPackageImportStamp></NuGetPackageImportStamp>
+    <NuGetPackageImportStamp>
+    </NuGetPackageImportStamp>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
     <DebugSymbols>true</DebugSymbols>
@@ -94,8 +95,8 @@
     <Reference Include="Xamarin.GooglePlayServices.Tasks, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
       <HintPath>..\packages\Xamarin.GooglePlayServices.Tasks.60.1142.1\lib\MonoAndroid80\Xamarin.GooglePlayServices.Tasks.dll</HintPath>
     </Reference>
-    <Reference Include="Zebble.Android, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
-      <HintPath>..\packages\Zebble.4.4.185\lib\MonoAndroid10\Zebble.Android.dll</HintPath>
+    <Reference Include="Zebble.Android, Version=1.0.1.0, Culture=neutral, processorArchitecture=MSIL">
+      <HintPath>..\packages\Zebble.4.4.278\lib\MonoAndroid10\Zebble.Android.dll</HintPath>
     </Reference>
   </ItemGroup>
   <ItemGroup>
diff --git a/Android/packages.config b/Android/packages.config
index d2454d2..da3a874 100644
--- a/Android/packages.config
+++ b/Android/packages.config
@@ -1,4 +1,5 @@
-﻿<packages>
+﻿<?xml version="1.0" encoding="utf-8"?>
+<packages>
   <package id="Newtonsoft.Json" version="9.0.1" targetFramework="monoandroid81" />
   <package id="Xamarin.Android.Arch.Core.Common" version="1.0.0" targetFramework="monoandroid81" />
   <package id="Xamarin.Android.Arch.Lifecycle.Common" version="1.0.3" targetFramework="monoandroid81" />
@@ -17,5 +18,5 @@
   <package id="Xamarin.GooglePlayServices.Base" version="60.1142.1" targetFramework="monoandroid81" />
   <package id="Xamarin.GooglePlayServices.Basement" version="60.1142.1" targetFramework="monoandroid81" />
   <package id="Xamarin.GooglePlayServices.Tasks" version="60.1142.1" targetFramework="monoandroid81" />
-  <package id="Zebble" version="4.4.185" targetFramework="monoandroid81" />
+  <package id="Zebble" version="4.4.278" targetFramework="monoandroid81" />
 </packages>
\ No newline at end of file
diff --git a/UWP/Google.cs b/UWP/Google.cs
index efbfd1d..cb7f290 100644
--- a/UWP/Google.cs
+++ b/UWP/Google.cs
@@ -9,6 +9,7 @@
     using System.Threading.Tasks;
     using Windows.ApplicationModel.Activation;
     using Windows.Data.Json;
+    using Windows.Security.Authentication.Web;
     using Windows.Security.Cryptography;
     using Windows.Security.Cryptography.Core;
     using Windows.Storage;
@@ -29,6 +30,8 @@
 
             if (applicationBundle != null)
                 RedirectURI = RedirectURI.Replace("zbl.oauth2", applicationBundle);
+
+            UIRuntime.OnActivated.Handle(OnNavigatingTo);
         }
 
         public static async Task SignIn()
@@ -59,7 +62,7 @@
                     codeChallenge,
                     CODE_CHALLENGE_METHOD);
 
-                await Nav.ShowPopUp<GoogleUI>(new { Url = authorizationRequest });
+                await Windows.System.Launcher.LaunchUriAsync(new Uri(authorizationRequest));
             }
             catch (Exception ex)
             {
@@ -93,140 +96,89 @@
             return base64;
         }
 
-        internal class GoogleUI : Page
+        internal static async Task OnNavigatingTo(Tuple<IActivatedEventArgs, Window> args)
         {
-            public override async Task OnInitializing()
+            var protocol = args.Item1 as ProtocolActivatedEventArgs;
+            if (protocol != null && protocol.Uri != null)
             {
-                await base.OnInitializing();
+                var authorizationResponse = protocol.Uri;
+                var queryString = authorizationResponse.Query;
 
-                this.Width(Root.ActualWidth - 50).Height(Root.ActualHeight - 70).Margin(top: 20).Background(color: Colors.White);
+                var queryStringParams = queryString.Substring(1).Split('&')
+                    .ToDictionary(c => c.Split('=')[0], c => Uri.UnescapeDataString(c.Split('=')[1]));
 
-                var header = new Stack { Direction = RepeatDirection.Horizontal };
+                if (queryStringParams.ContainsKey("error"))
+                    return;
 
-                var title = new TextView { Text = "GoogleSignIn" };
-                title.Padding(all: 5).Border(bottom: 1, color: Colors.Silver).Width(100.Percent());
+                if (!queryStringParams.ContainsKey("code") || !queryStringParams.ContainsKey("state"))
+                    return;
 
-                var closeBtn = new Button { Text = "x" };
-                closeBtn.TextColor(Colors.Gray).Width(20).Height(20);
-                closeBtn.Tapped.Handle(() => Nav.HidePopUp());
+                var code = queryStringParams["code"];
+                var incomingState = queryStringParams["state"];
 
-                await header.Add(title);
-                await header.Add(closeBtn);
+                var localSettings = ApplicationData.Current.LocalSettings;
+                var expectedState = (string)localSettings.Values["state"];
 
-                var authorizationRequest = Nav.Param<string>("Url");
-                var browser = new WebView(authorizationRequest);
-                browser.Width(100.Percent()).Height(100.Percent()).Margin(top: title.ActualHeight);
-                browser.BrowserNavigating.Handle(args => OnNavigating(args));
+                if (incomingState != expectedState)
+                    return;
 
-                header.Height.BindTo(title.Height);
+                localSettings.Values["state"] = null;
 
-                await Add(header);
-                await Add(browser);
+                var codeVerifier = (string)localSettings.Values["code_verifier"];
 
-                UIRuntime.OnActivated.Handle(args => OnNavigatingTo(args));
+                await PerformCodeExchangeAsync(code, codeVerifier);
             }
-
-            public async Task OnNavigating(WebView.NavigatingEventArgs args)
+            else
             {
-                if (args.Url != null && args.Url != "")
-                {
-                    if (args.Url.Contains("www.google.com"))
-                    {
-                        await Nav.HidePopUp();
-                        await Task.CompletedTask;
-                    }
-                }
-                else
-                {
-                    Device.Log.Message(args.Url);
-
-                    await Nav.HidePopUp();
-                    await Task.CompletedTask;
-                }
+                Device.Log.Message(protocol.Uri.AbsoluteUri);
+                await Task.CompletedTask;
             }
+        }
 
-            async Task OnNavigatingTo(Tuple<IActivatedEventArgs, Window> args)
-            {
-                var protocol = args.Item1 as ProtocolActivatedEventArgs;
-                if (protocol != null && protocol.Uri != null)
-                {
-                    // Gets URI from navigation parameters.
-                    var authorizationResponse = protocol.Uri;
-                    var queryString = authorizationResponse.Query;
-
-                    var queryStringParams = queryString.Substring(1).Split('&')
-                        .ToDictionary(c => c.Split('=')[0], c => Uri.UnescapeDataString(c.Split('=')[1]));
-
-                    if (queryStringParams.ContainsKey("error"))
-                    {
-                        await Nav.HidePopUp();
-                        return;
-                    }
-
-                    if (!queryStringParams.ContainsKey("code") || !queryStringParams.ContainsKey("state"))
-                        return;
-
-                    var code = queryStringParams["code"];
-                    var incomingState = queryStringParams["state"];
-
-                    var localSettings = ApplicationData.Current.LocalSettings;
-                    var expectedState = (string)localSettings.Values["state"];
-
-                    if (incomingState != expectedState)
-                        return;
+        internal static async Task<string> GetAccessToken(string code, string codeVerifier)
+        {
+            var content = new StringContent($"code={code}&redirect_uri={Uri.EscapeDataString(RedirectURI)}&client_id={ClientId}&code_verifier={codeVerifier}&grant_type=authorization_code",
+                                          Encoding.UTF8, "application/x-www-form-urlencoded");
 
-                    localSettings.Values["state"] = null;
+            using (var httpClient = new HttpClient(new HttpClientHandler { AllowAutoRedirect = true }))
+            {
+                var response = await httpClient.PostAsync(TOKEN_END_POINT, content);
+                string responseString = await response.Content.ReadAsStringAsync();
 
-                    var codeVerifier = (string)localSettings.Values["code_verifier"];
-                    await PerformCodeExchangeAsync(code, codeVerifier);
-                }
-                else
+                if (!response.IsSuccessStatusCode)
                 {
-                    Device.Log.Message(protocol.Uri.AbsoluteUri);
-
-                    await Nav.HidePopUp();
-                    await Task.CompletedTask;
+                    Device.Log.Error("Authorization code exchange failed.");
+                    return null;
                 }
-            }
-
-            async Task PerformCodeExchangeAsync(string code, string codeVerifier)
-            {
-                // Builds the Token request
-                var tokenRequestBody = string.Format("code={0}&redirect_uri={1}&client_id={2}&code_verifier={3}&scope=&grant_type=authorization_code",
-                    code,
-                    Uri.EscapeDataString(RedirectURI),
-                    ClientId,
-                    codeVerifier
-                    );
 
-                var content = new StringContent(tokenRequestBody, Encoding.UTF8, "application/x-www-form-urlencoded");
-                var handler = new HttpClientHandler { AllowAutoRedirect = true };
-                var client = new HttpClient(handler);
-                var response = await client.PostAsync(TOKEN_END_POINT, content);
-                var responseString = await response.Content.ReadAsStringAsync();
+                JsonObject tokens = JsonObject.Parse(responseString);
+                return tokens.GetNamedString("access_token");
+            }
+        }
 
-                if (!response.IsSuccessStatusCode)
-                    return;
+        internal static async Task PerformCodeExchangeAsync(string code, string codeVerifier)
+        {
+            var accessToken = await GetAccessToken(code, codeVerifier);
 
-                var tokens = JsonObject.Parse(responseString);
-                var accessToken = tokens.GetNamedString("id_token");
-                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
+            using (var httpClient = new HttpClient(new HttpClientHandler { AllowAutoRedirect = true }))
+            {
+                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
 
-                var userinfoResponse = await client.GetAsync(USER_INFO_END_POINT);
+                var userinfoResponse = await httpClient.GetAsync(USER_INFO_END_POINT);
                 var userinfoResponseContent = await userinfoResponse.Content.ReadAsStringAsync();
 
-                await Nav.HidePopUp();
                 var account = JsonConvert.DeserializeObject<JObject>(userinfoResponseContent);
-                await UserSignedIn.Raise(new Google.User
+                var user = new User { Token = accessToken };
+                if (!userinfoResponseContent.Contains("error"))
                 {
-                    FamilyName = account["family_name"].Value<string>(),
-                    GivenName = account["given_name"].Value<string>(),
-                    Email = account["email"].Value<string>(),
-                    Name = account["name"].Value<string>(),
-                    Id = account["sub"].Value<string>(),
-                    Picture = account["picture"].Value<string>(),
-                    Token = accessToken
-                });
+                    user.FamilyName = account["family_name"].Value<string>();
+                    user.GivenName = account["given_name"].Value<string>();
+                    user.Email = account["email"].Value<string>();
+                    user.Name = account["name"].Value<string>();
+                    user.Id = account["sub"].Value<string>();
+                    user.Picture = account["picture"].Value<string>();
+                }
+                await UserSignedIn.Raise(user);
             }
         }
     }
diff --git a/UWP/UWP.csproj b/UWP/UWP.csproj
index 83d3503..7f019fb 100644
--- a/UWP/UWP.csproj
+++ b/UWP/UWP.csproj
@@ -1,7 +1,7 @@
 ﻿<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
   <PropertyGroup>
-    <TargetPlatformVersion>10.0.17763.0</TargetPlatformVersion>
+    <TargetPlatformVersion>10.0.18362.0</TargetPlatformVersion>
     <TargetPlatformMinVersion>10.0.10240.0</TargetPlatformMinVersion>
     <TargetPlatformIdentifier>UAP</TargetPlatformIdentifier>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
@@ -121,10 +121,10 @@
       <Version>0.4.11</Version>
     </PackageReference>
     <PackageReference Include="Zebble">
-      <Version>4.4.185</Version>
+      <Version>4.4.278</Version>
     </PackageReference>
     <PackageReference Include="Zebble.WebView">
-      <Version>4.2.239</Version>
+      <Version>4.3.261</Version>
     </PackageReference>
   </ItemGroup>
   <Import Project="..\Shared\Shared.projitems" Label="Shared" Condition="Exists('..\Shared\Shared.projitems')" />
diff --git a/iOS/iOS.csproj b/iOS/iOS.csproj
index 747e4cf..a1e9e48 100644
--- a/iOS/iOS.csproj
+++ b/iOS/iOS.csproj
@@ -13,7 +13,8 @@
     <AssemblyName>Zebble.Google.iOS</AssemblyName>
     <OutputPath>..\lib\</OutputPath>
     <DefineConstants>__UNIFIED__;__MOBILE__;__IOS__;IOS;</DefineConstants>
-    <NuGetPackageImportStamp></NuGetPackageImportStamp>
+    <NuGetPackageImportStamp>
+    </NuGetPackageImportStamp>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
     <DebugSymbols>true</DebugSymbols>
@@ -59,7 +60,7 @@
     </Reference>
     <Reference Include="Xamarin.iOS" />
     <Reference Include="Zebble.iOS, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
-      <HintPath>..\packages\Zebble.4.4.185\lib\Xamarin.iOS10\Zebble.iOS.dll</HintPath>
+      <HintPath>..\packages\Zebble.4.4.278\lib\Xamarin.iOS10\Zebble.iOS.dll</HintPath>
     </Reference>
   </ItemGroup>
   <ItemGroup>
diff --git a/iOS/packages.config b/iOS/packages.config
index 27855e2..6bfb246 100644
--- a/iOS/packages.config
+++ b/iOS/packages.config
@@ -1,9 +1,10 @@
-﻿<packages>
+﻿<?xml version="1.0" encoding="utf-8"?>
+<packages>
   <package id="Newtonsoft.Json" version="9.0.1" targetFramework="xamarinios10" />
   <package id="Xamarin.Auth" version="1.6.0.2" targetFramework="xamarinios10" />
   <package id="Xamarin.Build.Download" version="0.4.11" targetFramework="xamarinios10" />
   <package id="Xamarin.Firebase.iOS.Analytics" version="4.0.5.1" targetFramework="xamarinios10" />
   <package id="Xamarin.Firebase.iOS.Core" version="4.0.13.1" targetFramework="xamarinios10" />
   <package id="Xamarin.Firebase.iOS.InstanceID" version="2.0.8" targetFramework="xamarinios10" />
-  <package id="Zebble" version="4.4.185" targetFramework="xamarinios10" />
+  <package id="Zebble" version="4.4.278" targetFramework="xamarinios10" />
 </packages>
\ No newline at end of file
